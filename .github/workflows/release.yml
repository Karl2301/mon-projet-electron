name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create assets directory and placeholder icon
        run: |
          mkdir -p ./assets
          
          # CrÃ©er un vrai fichier PNG (16x16 pixels, transparent)
          echo "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAACBFBMVEUAAADr6+/g5Org4+jn6e3p6+/n5+vf4+je4ube4ufn6+/l5+vn6+3f4+ff4+ff4+jd4ebl5ujn5+nm5+nk5unc4OXh5OfO2OLH0+DM1uHL1uHQ2eLh5Oje4ufo6OrG0+BDf7gka68gaa4obrAhaa5NhbvT2+Tl5uns6+uyxto7erZ2n8cucrIVYqsiaq8WY6srcLFwnMZAfbjE0d/o6erd4ubr6uu8zNwzdbR4ochMhbtFgLl3n8cvdLYncbjb5O729fbs7/Pg5Ojc4ea8zN0dZ60PXqlXjL6Ws9FklsaLsNRZksllj7l0hZZ/i5iPmKORm6XV2d/i5eq4ytscZq1ol8NjlMIgarB7nsBskLSbr8NkbHZHUl9gbXoyQ1UqO068w8rq7fG2yNtEgLlCf7gBVqY6fLtweIFETllCT10sPU+Jkp3///9HVmYxQlS+xMvp7PCOr893oMiBp82buddibns4SFhBUWEtP1F9h5M7S1wyQ1S/xczd4uft6+vv7Ozz8O/z8vFgbnw4SFk5SVprd4Tg4+W8wcdFVGS4v8fm6e1cank1RVc6SltDUmPX296epq4rPU+6wcjp7PHd4efg5Onn6u9jcH4wQVM8TF2Ai5YqPE40RVbDydDo6+/R1ty+xMzAx87CyM+7wcmwuMC9xMvFy9Lj5+zo6/Dn6+/n6u7m6u4B/BtYAAAADnRSTlMAQL+/gIBAv7+/QICAv8HrDEgAAAABb3JOVAHPoneaAAABDElEQVQY02NgYGTi4+Pj5+cDAWYWBgZWAUEhYRAQEhEQEBBlY2AXE5eQlJSSlJSQlhGQFeBgkJNXUFRSVlZWUVFVU5eVFWDQ0NTS1tHV0zcwNDI2kTU1ZTAz17WwtNK1trG1s3dwdHJmMHNxdXP38PTy9vH18w8IDGIwCw4JDQuPiIyKjomNi09IZDBLSk5JTUvPyMzKzsnNyy9gkHEuLCouKS0rr6jMqaquKWCo5aurb2hsam5pbctp7+gsYJAVkJUN6uru6e3rz5kwcdJkkMCUqdOmz5gZ1zdr9py58xjYge6dMnX+goWLFi9ZukyWk4FLFOgngeUrVq6ctmreamduBgYeXlk44GRjAAB6hUanOLRILwAAAABJRU5ErkJggg=="
          
          # CrÃ©er un fichier ICO pour Windows (copier du PNG)
          cp ./assets/icon.png ./assets/icon.ico
        shell: bash
        
      - name: Build CSS production
        run: npm run build-css:prod
        
      - name: Create oauth.config.json
        run: |
          if [ ! -f "./src/oauth.config.json" ]; then
            echo '{"clientId":"${{ secrets.OAUTH_CLIENT_ID || 'demo-client-id' }}","tenant":"common","scopes":"offline_access Mail.Read Mail.ReadWrite"}' > ./src/oauth.config.json
          fi
        shell: bash
        
      - name: Build and package for macOS
        if: matrix.os == 'macos-latest'
        run: |
          npm run package
          npm run make
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          
      - name: Build and package for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npm run package
          npm run make
        env:
          CSC_LINK: ${{ secrets.WINDOWS_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CSC_KEY_PASSWORD }}
          
      - name: Build and package for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run package
          npm run make
          
      - name: List and prepare build artifacts
        id: artifacts
        run: |
          echo "Listing build artifacts:"
          find ./out -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.AppImage" \)
          
          # CrÃ©er un dossier pour les artefacts finaux
          mkdir -p ./release-artifacts
          
          # Copier tous les artefacts avec des noms standardisÃ©s
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            find ./out -name "*.dmg" -exec cp {} ./release-artifacts/ \;
            find ./out -name "*.zip" -exec cp {} ./release-artifacts/ \;
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            find ./out -name "*.exe" -exec cp {} ./release-artifacts/ \;
            find ./out -name "*.zip" -exec cp {} ./release-artifacts/ \;
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            find ./out -name "*.deb" -exec cp {} ./release-artifacts/ \;
            find ./out -name "*.rpm" -exec cp {} ./release-artifacts/ \;
            find ./out -name "*.AppImage" -exec cp {} ./release-artifacts/ \;
            find ./out -name "*.zip" -exec cp {} ./release-artifacts/ \;
          fi
          
          echo "Final artifacts:"
          ls -la ./release-artifacts/
        shell: bash
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: ./release-artifacts/*
          retention-days: 5
          
  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Prepare release files
        run: |
          echo "Downloaded artifacts structure:"
          find ./artifacts -type f
          
          # CrÃ©er un dossier pour tous les fichiers de release
          mkdir -p ./release-files
          
          # Copier tous les artefacts dans un seul dossier
          find ./artifacts -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.AppImage" \) -exec cp {} ./release-files/ \;
          
          echo "Release files:"
          ls -la ./release-files/
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## ðŸš€ Release ${{ steps.version.outputs.VERSION }}
          
          ### ðŸ“§ Mon Projet Electron - Gestionnaire d'emails Outlook
          
          Cette release inclut les packages pour toutes les plateformes supportÃ©es :
          
          - **macOS** : Fichier `.dmg` pour installation sur Mac
          - **Windows** : Fichier `.exe` pour installation sur Windows  
          - **Linux** : Fichiers `.deb` (Ubuntu/Debian), `.rpm` (CentOS/Fedora) et `.AppImage` (portable)
          
          ### âœ¨ FonctionnalitÃ©s principales
          - Synchronisation avec Outlook via Microsoft Graph API
          - Sauvegarde intelligente des emails dans des sous-dossiers INBOX
          - Gestion automatique des dossiers clients
          - Interface moderne et intuitive
          - Mode hors ligne avec cache
          
          ### ðŸ“¥ Installation
          1. TÃ©lÃ©chargez le fichier correspondant Ã  votre systÃ¨me d'exploitation
          2. ExÃ©cutez l'installateur
          3. Suivez les instructions Ã  l'Ã©cran
          
          ### ðŸ”§ Configuration requise
          - Compte Microsoft Outlook/Office 365
          - Connexion Internet pour la synchronisation
          - Permissions d'Ã©criture sur le systÃ¨me de fichiers
          
          ---
          
          **Note :** Cette application nÃ©cessite une configuration OAuth. Contactez l'administrateur pour obtenir les clÃ©s d'API si nÃ©cessaire.
          EOF
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: 'Mon Projet Electron ${{ steps.version.outputs.VERSION }}'
          body_path: ./release_notes.md
          draft: false
          prerelease: false
          files: ./release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
